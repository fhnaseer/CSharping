<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>
        Assert Test
      </Title>
      <Author>Faisal Hafeez</Author>
      <Description>Code snippet for overriding equals check in class.</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>EqualityOverrides</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>className</ID>
          <ToolTip>className</ToolTip>
          <Default>className</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>compareObjects</ID>
          <ToolTip>compareObjects</ToolTip>
          <Default>compareObjects</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[#region Methods for Equality checks.
// http://msdn.microsoft.com/en-us/library/dd183755.aspx
// Why ExcludeFromCodeCoverage? This code is used in multiple places and is heavily unit-tested.
// Code is taken from MSDN which uses additional null checks for better performance.
// It make no sense in writing same unit-tests again and again (is left null, is right null, etc.) again and again.
/// <summary>
/// Determines whether the specified <see cref="Object" />, is equal to this instance.
/// </summary>
/// <param name="obj">The <see cref="Object" /> to compare with this instance.</param>
/// <returns>
///   <c>true</c> if the specified <see cref="Object" /> is equal to this instance; otherwise, <c>false</c>.
/// </returns>
[ExcludeFromCodeCoverage]
public override bool Equals(object obj)
{
    return Equals(obj as $className$);
}

/// <summary>
/// Determines whether the specified $className$ is equal to the current $className$.
/// </summary>
/// <param name="other">The $className$ to compare with the current $className$.</param>
/// <returns>true if the specified $className$ is equal to the current $className$;
/// otherwise, false.</returns>
[ExcludeFromCodeCoverage]
internal bool Equals($className$ other)
{
    // If parameter is null, return false.
    if (other is null)
        return false;

    // Optimization for a common success case.
    if (ReferenceEquals(this, other))
        return true;

    return ($compareObjects$);
}

/// <summary>
/// Returns a hash code for this instance.
/// </summary>
/// <returns>
/// A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
/// </returns>
[ExcludeFromCodeCoverage]
public override int GetHashCode()
{
    return base.GetHashCode();
}

/// <summary>
/// Overrides equal operator for $className$.
/// </summary>
/// <param name="left">Left $className$.</param>
/// <param name="right">Right $className$</param>
/// <returns>true if the left $className$ is equal to the right $className$;
/// otherwise, false. </returns>
[ExcludeFromCodeCoverage]
public static bool operator ==($className$ left, $className$ right)
{
    // Check for null on left side.
    if (left is null)
    {
        if (right is null)
        {
            // null == null = true.
            return true;
        }

        // Only the left side is null.
        return false;
    }
    // Equals handles case of null on right side.
    return left.Equals(right);
}

/// <summary>
/// Overrides not equal operator for $className$.
/// </summary>
/// <param name="left">Left $className$.</param>
/// <param name="right">Right $className$</param>
/// <returns>true if the left $className$ is not equal to the right $className$;
/// otherwise, false. </returns>
[ExcludeFromCodeCoverage]
public static bool operator !=($className$ left, $className$ right)
{
    return !(left == right);
}
#endregion]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>